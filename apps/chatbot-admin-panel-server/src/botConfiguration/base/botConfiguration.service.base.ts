/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  BotConfiguration as PrismaBotConfiguration,
  ConversationFlow as PrismaConversationFlow,
} from "@prisma/client";

export class BotConfigurationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BotConfigurationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.botConfiguration.count(args);
  }

  async botConfigurations<T extends Prisma.BotConfigurationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BotConfigurationFindManyArgs>
  ): Promise<PrismaBotConfiguration[]> {
    return this.prisma.botConfiguration.findMany<Prisma.BotConfigurationFindManyArgs>(
      args
    );
  }
  async botConfiguration<T extends Prisma.BotConfigurationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BotConfigurationFindUniqueArgs>
  ): Promise<PrismaBotConfiguration | null> {
    return this.prisma.botConfiguration.findUnique(args);
  }
  async createBotConfiguration<T extends Prisma.BotConfigurationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BotConfigurationCreateArgs>
  ): Promise<PrismaBotConfiguration> {
    return this.prisma.botConfiguration.create<T>(args);
  }
  async updateBotConfiguration<T extends Prisma.BotConfigurationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BotConfigurationUpdateArgs>
  ): Promise<PrismaBotConfiguration> {
    return this.prisma.botConfiguration.update<T>(args);
  }
  async deleteBotConfiguration<T extends Prisma.BotConfigurationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BotConfigurationDeleteArgs>
  ): Promise<PrismaBotConfiguration> {
    return this.prisma.botConfiguration.delete(args);
  }

  async findConversationFlows(
    parentId: string,
    args: Prisma.ConversationFlowFindManyArgs
  ): Promise<PrismaConversationFlow[]> {
    return this.prisma.botConfiguration
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .conversationFlows(args);
  }
}
