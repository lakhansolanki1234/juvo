/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BotConfiguration } from "./BotConfiguration";
import { BotConfigurationCountArgs } from "./BotConfigurationCountArgs";
import { BotConfigurationFindManyArgs } from "./BotConfigurationFindManyArgs";
import { BotConfigurationFindUniqueArgs } from "./BotConfigurationFindUniqueArgs";
import { CreateBotConfigurationArgs } from "./CreateBotConfigurationArgs";
import { UpdateBotConfigurationArgs } from "./UpdateBotConfigurationArgs";
import { DeleteBotConfigurationArgs } from "./DeleteBotConfigurationArgs";
import { ConversationFlowFindManyArgs } from "../../conversationFlow/base/ConversationFlowFindManyArgs";
import { ConversationFlow } from "../../conversationFlow/base/ConversationFlow";
import { BotConfigurationService } from "../botConfiguration.service";
@graphql.Resolver(() => BotConfiguration)
export class BotConfigurationResolverBase {
  constructor(protected readonly service: BotConfigurationService) {}

  async _botConfigurationsMeta(
    @graphql.Args() args: BotConfigurationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BotConfiguration])
  async botConfigurations(
    @graphql.Args() args: BotConfigurationFindManyArgs
  ): Promise<BotConfiguration[]> {
    return this.service.botConfigurations(args);
  }

  @graphql.Query(() => BotConfiguration, { nullable: true })
  async botConfiguration(
    @graphql.Args() args: BotConfigurationFindUniqueArgs
  ): Promise<BotConfiguration | null> {
    const result = await this.service.botConfiguration(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BotConfiguration)
  async createBotConfiguration(
    @graphql.Args() args: CreateBotConfigurationArgs
  ): Promise<BotConfiguration> {
    return await this.service.createBotConfiguration({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BotConfiguration)
  async updateBotConfiguration(
    @graphql.Args() args: UpdateBotConfigurationArgs
  ): Promise<BotConfiguration | null> {
    try {
      return await this.service.updateBotConfiguration({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BotConfiguration)
  async deleteBotConfiguration(
    @graphql.Args() args: DeleteBotConfigurationArgs
  ): Promise<BotConfiguration | null> {
    try {
      return await this.service.deleteBotConfiguration(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [ConversationFlow], { name: "conversationFlows" })
  async findConversationFlows(
    @graphql.Parent() parent: BotConfiguration,
    @graphql.Args() args: ConversationFlowFindManyArgs
  ): Promise<ConversationFlow[]> {
    const results = await this.service.findConversationFlows(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
