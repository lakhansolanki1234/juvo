/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ConversationFlowService } from "../conversationFlow.service";
import { ConversationFlowCreateInput } from "./ConversationFlowCreateInput";
import { ConversationFlow } from "./ConversationFlow";
import { ConversationFlowFindManyArgs } from "./ConversationFlowFindManyArgs";
import { ConversationFlowWhereUniqueInput } from "./ConversationFlowWhereUniqueInput";
import { ConversationFlowUpdateInput } from "./ConversationFlowUpdateInput";

export class ConversationFlowControllerBase {
  constructor(protected readonly service: ConversationFlowService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ConversationFlow })
  async createConversationFlow(
    @common.Body() data: ConversationFlowCreateInput
  ): Promise<ConversationFlow> {
    return await this.service.createConversationFlow({
      data: {
        ...data,

        botConfiguration: data.botConfiguration
          ? {
              connect: data.botConfiguration,
            }
          : undefined,
      },
      select: {
        botConfiguration: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        flow: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ConversationFlow] })
  @ApiNestedQuery(ConversationFlowFindManyArgs)
  async conversationFlows(
    @common.Req() request: Request
  ): Promise<ConversationFlow[]> {
    const args = plainToClass(ConversationFlowFindManyArgs, request.query);
    return this.service.conversationFlows({
      ...args,
      select: {
        botConfiguration: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        flow: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ConversationFlow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async conversationFlow(
    @common.Param() params: ConversationFlowWhereUniqueInput
  ): Promise<ConversationFlow | null> {
    const result = await this.service.conversationFlow({
      where: params,
      select: {
        botConfiguration: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        flow: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ConversationFlow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateConversationFlow(
    @common.Param() params: ConversationFlowWhereUniqueInput,
    @common.Body() data: ConversationFlowUpdateInput
  ): Promise<ConversationFlow | null> {
    try {
      return await this.service.updateConversationFlow({
        where: params,
        data: {
          ...data,

          botConfiguration: data.botConfiguration
            ? {
                connect: data.botConfiguration,
              }
            : undefined,
        },
        select: {
          botConfiguration: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          flow: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ConversationFlow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteConversationFlow(
    @common.Param() params: ConversationFlowWhereUniqueInput
  ): Promise<ConversationFlow | null> {
    try {
      return await this.service.deleteConversationFlow({
        where: params,
        select: {
          botConfiguration: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          flow: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
