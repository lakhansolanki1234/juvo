/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ConversationFlow as PrismaConversationFlow,
  BotConfiguration as PrismaBotConfiguration,
} from "@prisma/client";

export class ConversationFlowServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConversationFlowCountArgs, "select">
  ): Promise<number> {
    return this.prisma.conversationFlow.count(args);
  }

  async conversationFlows<T extends Prisma.ConversationFlowFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConversationFlowFindManyArgs>
  ): Promise<PrismaConversationFlow[]> {
    return this.prisma.conversationFlow.findMany<Prisma.ConversationFlowFindManyArgs>(
      args
    );
  }
  async conversationFlow<T extends Prisma.ConversationFlowFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConversationFlowFindUniqueArgs>
  ): Promise<PrismaConversationFlow | null> {
    return this.prisma.conversationFlow.findUnique(args);
  }
  async createConversationFlow<T extends Prisma.ConversationFlowCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConversationFlowCreateArgs>
  ): Promise<PrismaConversationFlow> {
    return this.prisma.conversationFlow.create<T>(args);
  }
  async updateConversationFlow<T extends Prisma.ConversationFlowUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConversationFlowUpdateArgs>
  ): Promise<PrismaConversationFlow> {
    return this.prisma.conversationFlow.update<T>(args);
  }
  async deleteConversationFlow<T extends Prisma.ConversationFlowDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConversationFlowDeleteArgs>
  ): Promise<PrismaConversationFlow> {
    return this.prisma.conversationFlow.delete(args);
  }

  async getBotConfiguration(
    parentId: string
  ): Promise<PrismaBotConfiguration | null> {
    return this.prisma.conversationFlow
      .findUnique({
        where: { id: parentId },
      })
      .botConfiguration();
  }
}
